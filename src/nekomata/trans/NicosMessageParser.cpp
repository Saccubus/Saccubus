/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g
 *     -                            On : 2013-04-05 20:25:54
 *     -                for the parser : NicosMessageParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#include <string>
#include <vector>
#include <cinamo/String.h>
#include "../parser/ParseUtil.h"
using namespace nekomata::parser::util;
using namespace nekomata::tree;

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "NicosMessageParser.h"
/* ----------------------------------------- */

/**
 * Nekomata
 * Copyright (C) 2012 psi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pNicosMessageParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pNicosMessageParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pNicosMessageParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pNicosMessageParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   NicosMessageParserTokenNames[8+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "DoubleElement",
        (pANTLR3_UINT8) "DoubleString",
        (pANTLR3_UINT8) "Escape",
        (pANTLR3_UINT8) "JapString",
        (pANTLR3_UINT8) "NoSpacedString",
        (pANTLR3_UINT8) "SingleElement",
        (pANTLR3_UINT8) "SingleString",
        (pANTLR3_UINT8) "WS"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 std::vector<std::string>
	script    (pNicosMessageParser ctx);
static 
 std::string
	string    (pNicosMessageParser ctx);
static void	NicosMessageParserFree(pNicosMessageParser ctx);
static void     NicosMessageParserReset (pNicosMessageParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new NicosMessageParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNicosMessageParser
NicosMessageParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return NicosMessageParserNewSSD(instream, NULL);
}

/** \brief Create a new NicosMessageParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNicosMessageParser
NicosMessageParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pNicosMessageParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pNicosMessageParser) ANTLR3_CALLOC(1, sizeof(NicosMessageParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in NicosMessageParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our NicosMessageParser interface
     */
    ctx->script	= script;
    ctx->string	= string;
    ctx->free			= NicosMessageParserFree;
    ctx->reset			= NicosMessageParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = NicosMessageParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
NicosMessageParserReset (pNicosMessageParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 NicosMessageParserFree(pNicosMessageParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return NicosMessageParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_in_script58  */
static	ANTLR3_BITWORD FOLLOW_string_in_script58_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000005A2) };
static  ANTLR3_BITSET_LIST FOLLOW_string_in_script58	= { FOLLOW_string_in_script58_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_JapString_in_string79  */
static	ANTLR3_BITWORD FOLLOW_JapString_in_string79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_JapString_in_string79	= { FOLLOW_JapString_in_string79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SingleString_in_string88  */
static	ANTLR3_BITWORD FOLLOW_SingleString_in_string88_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SingleString_in_string88	= { FOLLOW_SingleString_in_string88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DoubleString_in_string97  */
static	ANTLR3_BITWORD FOLLOW_DoubleString_in_string97_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DoubleString_in_string97	= { FOLLOW_DoubleString_in_string97_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NoSpacedString_in_string106  */
static	ANTLR3_BITWORD FOLLOW_NoSpacedString_in_string106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NoSpacedString_in_string106	= { FOLLOW_NoSpacedString_in_string106_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start script
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:36:1: script returns [std::vector<std::string> val] : (str= string )* ;
 */
static std::vector<std::string>
script(pNicosMessageParser ctx)
{
    std::vector<std::string> val;


    std::string str;
    #undef	RETURN_TYPE_str
    #define	RETURN_TYPE_str std::string

    /* Initialize rule variables
     */


    	std::vector<std::string> vec;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:43:2: ( (str= string )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:43:4: (str= string )*
        {
            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:43:4: (str= string )*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case DoubleString:
                case JapString:
                case NoSpacedString:
                case SingleString:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:43:6: str= string
            	    {
            	        FOLLOWPUSH(FOLLOW_string_in_script58);
            	        str=string(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescriptEx;
            	        }


            	        {

            	            		vec.push_back(str
            	            );
            	            	
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulescriptEx; /* Prevent compiler warnings */
    rulescriptEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	val= vec;


                }
            }


    return val;
}
/* $ANTLR end script */

/**
 * $ANTLR start string
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:49:1: string returns [std::string val] : (a= JapString |b= SingleString |c= DoubleString |d= NoSpacedString );
 */
static std::string
string(pNicosMessageParser ctx)
{
    std::string val;


    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    b;
    pANTLR3_COMMON_TOKEN    c;
    pANTLR3_COMMON_TOKEN    d;

    /* Initialize rule variables
     */

    a       = NULL;
    b       = NULL;
    c       = NULL;
    d       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:49:33: (a= JapString |b= SingleString |c= DoubleString |d= NoSpacedString )

            ANTLR3_UINT32 alt2;

            alt2=4;

            switch ( LA(1) )
            {
            case JapString:
            	{
            		alt2=1;
            	}
                break;
            case SingleString:
            	{
            		alt2=2;
            	}
                break;
            case DoubleString:
            	{
            		alt2=3;
            	}
                break;
            case NoSpacedString:
            	{
            		alt2=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulestringEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:50:2: a= JapString
        	    {
        	        a = (pANTLR3_COMMON_TOKEN) MATCHT(JapString, &FOLLOW_JapString_in_string79);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {
        	             std::string tmp=createStringFromToken(a); 
        	            val=tmp.substr(std::string("\u300c").size(), tmp.size()-std::string("\u300c\u300d").size());
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:51:4: b= SingleString
        	    {
        	        b = (pANTLR3_COMMON_TOKEN) MATCHT(SingleString, &FOLLOW_SingleString_in_string88);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {
        	             std::string tmp=createStringFromToken(b); 
        	            val=tmp.substr(1, tmp.size()-2);
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:52:4: c= DoubleString
        	    {
        	        c = (pANTLR3_COMMON_TOKEN) MATCHT(DoubleString, &FOLLOW_DoubleString_in_string97);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {
        	             std::string tmp=createStringFromToken(c); 
        	            val=unescapeString(tmp.substr(1, tmp.size()-2));
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/trans/NicosMessage.g:53:4: d= NoSpacedString
        	    {
        	        d = (pANTLR3_COMMON_TOKEN) MATCHT(NoSpacedString, &FOLLOW_NoSpacedString_in_string106);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {
        	             val=createStringFromToken(d);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestringEx; /* Prevent compiler warnings */
    rulestringEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end string */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
