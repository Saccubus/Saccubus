/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g
 *     -                            On : 2013-04-07 10:42:14
 *     -                for the parser : niwangoParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#include <string>
#include <iostream>
#include <memory>
#include <cstdlib>
#include <cinamo/String.h>
#include "ParseUtil.h"
#include "../tree/Node.h"
using namespace nekomata::parser::util;
using namespace nekomata::tree;
using std::shared_ptr;
typedef pANTLR3_COMMON_TOKEN Token;

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "niwangoParser.h"
/* ----------------------------------------- */

/* coding: utf-8 */
/**
 * Nekomata
 *
 * Copyright 2012-2013, PSI
 */




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pniwangoParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pniwangoParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pniwangoParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pniwangoParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   niwangoParserTokenNames[53+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NUM_LITERAL",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "':='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'<>'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "'\\\\'",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'||'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 shared_ptr<const ExprNode>
	program    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr6    (pniwangoParser ctx);
static 
 niwangoParser_assign_op_return
	assign_op    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr5    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr4    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr3    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr2    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	expr1    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	term    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	postfix    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	primary    (pniwangoParser ctx);
static 
 shared_ptr<const ObjectNode>
	object_def    (pniwangoParser ctx, Token tok);
static 
 niwangoParser_object_element_return
	object_element    (pniwangoParser ctx);
static 
 shared_ptr<const ExprNode>
	object_expr_list    (pniwangoParser ctx);
static 
 niwangoParser_name_return
	name    (pniwangoParser ctx);
static 
 shared_ptr<const ObjectNode>
	array    (pniwangoParser ctx);
static 
 shared_ptr<const LiteralNode>
	literal    (pniwangoParser ctx);
static 
 shared_ptr<const BoolLiteralNode>
	boolean    (pniwangoParser ctx);
static 
 shared_ptr<const NumericLiteralNode>
	numeric    (pniwangoParser ctx);
static 
 shared_ptr<const StringLiteralNode>
	string    (pniwangoParser ctx);
static void	niwangoParserFree(pniwangoParser ctx);
static void     niwangoParserReset (pniwangoParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new niwangoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pniwangoParser
niwangoParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return niwangoParserNewSSD(instream, NULL);
}

/** \brief Create a new niwangoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pniwangoParser
niwangoParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pniwangoParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pniwangoParser) ANTLR3_CALLOC(1, sizeof(niwangoParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in niwangoParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our niwangoParser interface
     */
    ctx->program	= program;
    ctx->expr	= expr;
    ctx->expr6	= expr6;
    ctx->assign_op	= assign_op;
    ctx->expr5	= expr5;
    ctx->expr4	= expr4;
    ctx->expr3	= expr3;
    ctx->expr2	= expr2;
    ctx->expr1	= expr1;
    ctx->term	= term;
    ctx->postfix	= postfix;
    ctx->primary	= primary;
    ctx->object_def	= object_def;
    ctx->object_element	= object_element;
    ctx->object_expr_list	= object_expr_list;
    ctx->name	= name;
    ctx->array	= array;
    ctx->literal	= literal;
    ctx->boolean	= boolean;
    ctx->numeric	= numeric;
    ctx->string	= string;
    ctx->free			= niwangoParserFree;
    ctx->reset			= niwangoParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = niwangoParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
niwangoParserReset (pniwangoParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 niwangoParserFree(pniwangoParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return niwangoParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_program53  */
static	ANTLR3_BITWORD FOLLOW_expr_in_program53_bits[]	= { ANTLR3_UINT64_LIT(0x0000080400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_program53	= { FOLLOW_expr_in_program53_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_program65  */
static	ANTLR3_BITWORD FOLLOW_set_in_program65_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_program65	= { FOLLOW_set_in_program65_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_program75  */
static	ANTLR3_BITWORD FOLLOW_expr_in_program75_bits[]	= { ANTLR3_UINT64_LIT(0x0000080400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_program75	= { FOLLOW_expr_in_program75_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_expr110  */
static	ANTLR3_BITWORD FOLLOW_52_in_expr110_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_expr110	= { FOLLOW_52_in_expr110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr114  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr114	= { FOLLOW_expr6_in_expr114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr124  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr124	= { FOLLOW_expr6_in_expr124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6150  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6150_bits[]	= { ANTLR3_UINT64_LIT(0x0000852242000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6150	= { FOLLOW_expr5_in_expr6150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_expr6163  */
static	ANTLR3_BITWORD FOLLOW_42_in_expr6163_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_expr6163	= { FOLLOW_42_in_expr6163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_expr6169  */
static	ANTLR3_BITWORD FOLLOW_47_in_expr6169_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_expr6169	= { FOLLOW_47_in_expr6169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assign_op_in_expr6173  */
static	ANTLR3_BITWORD FOLLOW_assign_op_in_expr6173_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_assign_op_in_expr6173	= { FOLLOW_assign_op_in_expr6173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6182  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6182	= { FOLLOW_expr_in_expr6182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_assign_op207  */
static	ANTLR3_BITWORD FOLLOW_33_in_assign_op207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_assign_op207	= { FOLLOW_33_in_assign_op207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_assign_op216  */
static	ANTLR3_BITWORD FOLLOW_37_in_assign_op216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_assign_op216	= { FOLLOW_37_in_assign_op216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_assign_op225  */
static	ANTLR3_BITWORD FOLLOW_30_in_assign_op225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_assign_op225	= { FOLLOW_30_in_assign_op225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_assign_op234  */
static	ANTLR3_BITWORD FOLLOW_40_in_assign_op234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_assign_op234	= { FOLLOW_40_in_assign_op234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_assign_op243  */
static	ANTLR3_BITWORD FOLLOW_25_in_assign_op243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_assign_op243	= { FOLLOW_25_in_assign_op243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5272  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5272_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5272	= { FOLLOW_expr4_in_expr5272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_expr5284  */
static	ANTLR3_BITWORD FOLLOW_56_in_expr5284_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_expr5284	= { FOLLOW_56_in_expr5284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5288  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5288_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5288	= { FOLLOW_expr4_in_expr5288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4320  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4320	= { FOLLOW_expr3_in_expr4320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_expr4332  */
static	ANTLR3_BITWORD FOLLOW_26_in_expr4332_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_expr4332	= { FOLLOW_26_in_expr4332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4336  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4336	= { FOLLOW_expr3_in_expr4336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3368  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3368_bits[]	= { ANTLR3_UINT64_LIT(0x0007700000800002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3368	= { FOLLOW_expr2_in_expr3368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_expr3381  */
static	ANTLR3_BITWORD FOLLOW_44_in_expr3381_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_expr3381	= { FOLLOW_44_in_expr3381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_expr3389  */
static	ANTLR3_BITWORD FOLLOW_49_in_expr3389_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_expr3389	= { FOLLOW_49_in_expr3389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_expr3397  */
static	ANTLR3_BITWORD FOLLOW_46_in_expr3397_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_expr3397	= { FOLLOW_46_in_expr3397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_expr3405  */
static	ANTLR3_BITWORD FOLLOW_48_in_expr3405_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_expr3405	= { FOLLOW_48_in_expr3405_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_expr3413  */
static	ANTLR3_BITWORD FOLLOW_23_in_expr3413_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_expr3413	= { FOLLOW_23_in_expr3413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_expr3421  */
static	ANTLR3_BITWORD FOLLOW_45_in_expr3421_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_expr3421	= { FOLLOW_45_in_expr3421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_expr3429  */
static	ANTLR3_BITWORD FOLLOW_50_in_expr3429_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_expr3429	= { FOLLOW_50_in_expr3429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3439  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3439_bits[]	= { ANTLR3_UINT64_LIT(0x0007700000800002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3439	= { FOLLOW_expr2_in_expr3439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2471  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000880000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2471	= { FOLLOW_expr1_in_expr2471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_expr2484  */
static	ANTLR3_BITWORD FOLLOW_31_in_expr2484_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_expr2484	= { FOLLOW_31_in_expr2484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_expr2491  */
static	ANTLR3_BITWORD FOLLOW_35_in_expr2491_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_expr2491	= { FOLLOW_35_in_expr2491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2500  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000880000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2500	= { FOLLOW_expr1_in_expr2500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1530  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1530_bits[]	= { ANTLR3_UINT64_LIT(0x0000008021000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1530	= { FOLLOW_term_in_expr1530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_expr1544  */
static	ANTLR3_BITWORD FOLLOW_29_in_expr1544_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_expr1544	= { FOLLOW_29_in_expr1544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_expr1552  */
static	ANTLR3_BITWORD FOLLOW_39_in_expr1552_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_expr1552	= { FOLLOW_39_in_expr1552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_expr1560  */
static	ANTLR3_BITWORD FOLLOW_24_in_expr1560_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_expr1560	= { FOLLOW_24_in_expr1560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1569  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1569_bits[]	= { ANTLR3_UINT64_LIT(0x0000008021000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1569	= { FOLLOW_term_in_expr1569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_term594  */
static	ANTLR3_BITWORD FOLLOW_32_in_term594_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_term594	= { FOLLOW_32_in_term594_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term598  */
static	ANTLR3_BITWORD FOLLOW_term_in_term598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term598	= { FOLLOW_term_in_term598_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_term608  */
static	ANTLR3_BITWORD FOLLOW_36_in_term608_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_term608	= { FOLLOW_36_in_term608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term612  */
static	ANTLR3_BITWORD FOLLOW_term_in_term612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term612	= { FOLLOW_term_in_term612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_term622  */
static	ANTLR3_BITWORD FOLLOW_31_in_term622_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_term622	= { FOLLOW_31_in_term622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term626  */
static	ANTLR3_BITWORD FOLLOW_term_in_term626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term626	= { FOLLOW_term_in_term626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_term636  */
static	ANTLR3_BITWORD FOLLOW_35_in_term636_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_term636	= { FOLLOW_35_in_term636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term640  */
static	ANTLR3_BITWORD FOLLOW_term_in_term640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term640	= { FOLLOW_term_in_term640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_term650  */
static	ANTLR3_BITWORD FOLLOW_22_in_term650_bits[]	= { ANTLR3_UINT64_LIT(0x00C80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_term650	= { FOLLOW_22_in_term650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term654  */
static	ANTLR3_BITWORD FOLLOW_term_in_term654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term654	= { FOLLOW_term_in_term654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_in_term662  */
static	ANTLR3_BITWORD FOLLOW_postfix_in_term662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_in_term662	= { FOLLOW_postfix_in_term662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_postfix679  */
static	ANTLR3_BITWORD FOLLOW_primary_in_postfix679_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_postfix679	= { FOLLOW_primary_in_postfix679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_postfix689  */
static	ANTLR3_BITWORD FOLLOW_32_in_postfix689_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_postfix689	= { FOLLOW_32_in_postfix689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_postfix699  */
static	ANTLR3_BITWORD FOLLOW_36_in_postfix699_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_postfix699	= { FOLLOW_36_in_postfix699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_postfix709  */
static	ANTLR3_BITWORD FOLLOW_38_in_postfix709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_postfix709	= { FOLLOW_38_in_postfix709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_postfix711  */
static	ANTLR3_BITWORD FOLLOW_name_in_postfix711_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_postfix711	= { FOLLOW_name_in_postfix711_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_postfix721  */
static	ANTLR3_BITWORD FOLLOW_51_in_postfix721_bits[]	= { ANTLR3_UINT64_LIT(0x00F80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_postfix721	= { FOLLOW_51_in_postfix721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_def_in_postfix725  */
static	ANTLR3_BITWORD FOLLOW_object_def_in_postfix725_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_def_in_postfix725	= { FOLLOW_object_def_in_postfix725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_postfix728  */
static	ANTLR3_BITWORD FOLLOW_53_in_postfix728_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_postfix728	= { FOLLOW_53_in_postfix728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_postfix738  */
static	ANTLR3_BITWORD FOLLOW_27_in_postfix738_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019984B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_postfix738	= { FOLLOW_27_in_postfix738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_def_in_postfix742  */
static	ANTLR3_BITWORD FOLLOW_object_def_in_postfix742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_def_in_postfix742	= { FOLLOW_object_def_in_postfix742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_postfix745  */
static	ANTLR3_BITWORD FOLLOW_28_in_postfix745_bits[]	= { ANTLR3_UINT64_LIT(0x0008005108000002) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_postfix745	= { FOLLOW_28_in_postfix745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary766  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary766	= { FOLLOW_literal_in_primary766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_primary774  */
static	ANTLR3_BITWORD FOLLOW_array_in_primary774_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_primary774	= { FOLLOW_array_in_primary774_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_primary782  */
static	ANTLR3_BITWORD FOLLOW_name_in_primary782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_primary782	= { FOLLOW_name_in_primary782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_primary790  */
static	ANTLR3_BITWORD FOLLOW_27_in_primary790_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_primary790	= { FOLLOW_27_in_primary790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary796  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary796_bits[]	= { ANTLR3_UINT64_LIT(0x0000080010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary796	= { FOLLOW_expr_in_primary796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_primary807  */
static	ANTLR3_BITWORD FOLLOW_43_in_primary807_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_primary807	= { FOLLOW_43_in_primary807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary811  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary811_bits[]	= { ANTLR3_UINT64_LIT(0x0000080010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary811	= { FOLLOW_expr_in_primary811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_primary824  */
static	ANTLR3_BITWORD FOLLOW_28_in_primary824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_primary824	= { FOLLOW_28_in_primary824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_element_in_object_def852  */
static	ANTLR3_BITWORD FOLLOW_object_element_in_object_def852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_element_in_object_def852	= { FOLLOW_object_element_in_object_def852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_object_def860  */
static	ANTLR3_BITWORD FOLLOW_34_in_object_def860_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_object_def860	= { FOLLOW_34_in_object_def860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_element_in_object_def864  */
static	ANTLR3_BITWORD FOLLOW_object_element_in_object_def864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_element_in_object_def864	= { FOLLOW_object_element_in_object_def864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_object_element889  */
static	ANTLR3_BITWORD FOLLOW_name_in_object_element889_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_object_element889	= { FOLLOW_name_in_object_element889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_object_element893  */
static	ANTLR3_BITWORD FOLLOW_41_in_object_element893_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_object_element893	= { FOLLOW_41_in_object_element893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_expr_list_in_object_element898  */
static	ANTLR3_BITWORD FOLLOW_object_expr_list_in_object_element898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_expr_list_in_object_element898	= { FOLLOW_object_expr_list_in_object_element898_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_expr_list927  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_expr_list927_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_expr_list927	= { FOLLOW_expr_in_object_expr_list927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_object_expr_list936  */
static	ANTLR3_BITWORD FOLLOW_43_in_object_expr_list936_bits[]	= { ANTLR3_UINT64_LIT(0x00D80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_object_expr_list936	= { FOLLOW_43_in_object_expr_list936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_expr_list940  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_expr_list940_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_expr_list940	= { FOLLOW_expr_in_object_expr_list940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_object_expr_list952  */
static	ANTLR3_BITWORD FOLLOW_43_in_object_expr_list952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_object_expr_list952	= { FOLLOW_43_in_object_expr_list952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_name971  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_name971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_name971	= { FOLLOW_IDENT_in_name971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_array999  */
static	ANTLR3_BITWORD FOLLOW_51_in_array999_bits[]	= { ANTLR3_UINT64_LIT(0x00F80019884B4C00) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_array999	= { FOLLOW_51_in_array999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_def_in_array1002  */
static	ANTLR3_BITWORD FOLLOW_object_def_in_array1002_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_def_in_array1002	= { FOLLOW_object_def_in_array1002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_array1009  */
static	ANTLR3_BITWORD FOLLOW_53_in_array1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_array1009	= { FOLLOW_53_in_array1009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_in_literal1023  */
static	ANTLR3_BITWORD FOLLOW_numeric_in_literal1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_in_literal1023	= { FOLLOW_numeric_in_literal1023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_in_literal1033  */
static	ANTLR3_BITWORD FOLLOW_boolean_in_literal1033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_in_literal1033	= { FOLLOW_boolean_in_literal1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_in_literal1043  */
static	ANTLR3_BITWORD FOLLOW_string_in_literal1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_in_literal1043	= { FOLLOW_string_in_literal1043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_boolean1061  */
static	ANTLR3_BITWORD FOLLOW_55_in_boolean1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_boolean1061	= { FOLLOW_55_in_boolean1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_boolean1071  */
static	ANTLR3_BITWORD FOLLOW_54_in_boolean1071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_boolean1071	= { FOLLOW_54_in_boolean1071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_numeric1092  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_numeric1092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_numeric1092	= { FOLLOW_HEX_LITERAL_in_numeric1092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCT_LITERAL_in_numeric1098  */
static	ANTLR3_BITWORD FOLLOW_OCT_LITERAL_in_numeric1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OCT_LITERAL_in_numeric1098	= { FOLLOW_OCT_LITERAL_in_numeric1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUM_LITERAL_in_numeric1109  */
static	ANTLR3_BITWORD FOLLOW_NUM_LITERAL_in_numeric1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUM_LITERAL_in_numeric1109	= { FOLLOW_NUM_LITERAL_in_numeric1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_SINGLE_in_string1128  */
static	ANTLR3_BITWORD FOLLOW_STRING_SINGLE_in_string1128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_SINGLE_in_string1128	= { FOLLOW_STRING_SINGLE_in_string1128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_DOUBLE_in_string1138  */
static	ANTLR3_BITWORD FOLLOW_STRING_DOUBLE_in_string1138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_DOUBLE_in_string1138	= { FOLLOW_STRING_DOUBLE_in_string1138_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:42:1: program returns [shared_ptr<const ExprNode> result] : (fst= expr (t= ( ';' | ',' ) nxt= expr )* )? ( ';' | ',' )? ;
 */
static shared_ptr<const ExprNode>
program(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    t;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	shared_ptr<const ExprNode> resultNode;

    t       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:49:2: ( (fst= expr (t= ( ';' | ',' ) nxt= expr )* )? ( ';' | ',' )? )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:49:4: (fst= expr (t= ( ';' | ',' ) nxt= expr )* )? ( ';' | ',' )?
        {
            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:49:4: (fst= expr (t= ( ';' | ',' ) nxt= expr )* )?
            {
                int alt2=2;
                switch ( LA(1) )
                {
                    case HEX_LITERAL:
                    case IDENT:
                    case NUM_LITERAL:
                    case OCT_LITERAL:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case 22:
                    case 27:
                    case 31:
                    case 32:
                    case 35:
                    case 36:
                    case 51:
                    case 52:
                    case 54:
                    case 55:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:50:2: fst= expr (t= ( ';' | ',' ) nxt= expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_program53);
            	        fst=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {

            	            		resultNode=fst
            	            ;
            	            	
            	        }


            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:54:2: (t= ( ';' | ',' ) nxt= expr )*

            	        for (;;)
            	        {
            	            int alt1=2;
            	            switch ( LA(1) )
            	            {
            	            case 34:
            	            case 43:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case HEX_LITERAL:
            	            		case IDENT:
            	            		case NUM_LITERAL:
            	            		case OCT_LITERAL:
            	            		case STRING_DOUBLE:
            	            		case STRING_SINGLE:
            	            		case 22:
            	            		case 27:
            	            		case 31:
            	            		case 32:
            	            		case 35:
            	            		case 36:
            	            		case 51:
            	            		case 52:
            	            		case 54:
            	            		case 55:
            	            			{
            	            				alt1=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt1)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:55:3: t= ( ';' | ',' ) nxt= expr
            	        	    {
            	        	        t=(pANTLR3_COMMON_TOKEN)LT(1);

            	        	        if ( LA(1) == 34 || LA(1) == 43 )
            	        	        {
            	        	            CONSUME();
            	        	            PERRORRECOVERY=ANTLR3_FALSE;
            	        	        }
            	        	        else
            	        	        {
            	        	            CONSTRUCTEX();
            	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	            EXCEPTION->expectingSet = NULL;

            	        	            goto ruleprogramEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_expr_in_program75);
            	        	        nxt=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleprogramEx;
            	        	        }


            	        	        {

            	        	            			resultNode = shared_ptr<const ContNode>(new ContNode(createLocationFromToken(t), resultNode, 
            	        	            nxt
            	        	            ));
            	        	            		
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop1;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop1: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:60:2: ( ';' | ',' )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case 34:
                    case 43:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:
            	    {
            	        if ( LA(1) == 34 || LA(1) == 43 )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	        }
            	        else
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleprogramEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end program */

/**
 * $ANTLR start expr
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:62:1: expr returns [shared_ptr<const ExprNode> result] : (tok= '\\\\' t= expr6 |t= expr6 );
 */
static shared_ptr<const ExprNode>
expr(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t shared_ptr<const ExprNode>

    /* Initialize rule variables
     */

    tok       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:63:2: (tok= '\\\\' t= expr6 |t= expr6 )

            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) )
            {
            case 52:
            	{
            		alt4=1;
            	}
                break;
            case HEX_LITERAL:
            case IDENT:
            case NUM_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 22:
            case 27:
            case 31:
            case 32:
            case 35:
            case 36:
            case 51:
            case 54:
            case 55:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:63:4: tok= '\\\\' t= expr6
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(52, &FOLLOW_52_in_expr110);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expr6_in_expr114);
        	        t=expr6(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		shared_ptr<ObjectNode> objNode(shared_ptr<ObjectNode>(new ObjectNode(createLocationFromToken(tok))));
        	            		objNode->append("", 
        	            t
        	            );

        	            		shared_ptr<const InvokeNode> invoke = shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(tok), shared_ptr<const ExprNode>(), "lambda"));

        	            		
        	            result=shared_ptr<const BindNode>(new BindNode(createLocationFromToken(tok), invoke, objNode));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:72:4: t= expr6
        	    {
        	        FOLLOWPUSH(FOLLOW_expr6_in_expr124);
        	        t=expr6(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		result= 
        	            t
        	            ;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr6
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:77:1: expr6 returns [shared_ptr<const ExprNode> result] : fst= expr5 ( (tok= ':=' |tok= '=' | assign_op ) nxt= expr )? ;
 */
static shared_ptr<const ExprNode>
expr6(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    niwangoParser_assign_op_return assign_op1;
    #undef	RETURN_TYPE_assign_op1
    #define	RETURN_TYPE_assign_op1 niwangoParser_assign_op_return

    /* Initialize rule variables
     */


    	bool isLocal=false;
    	bool isOp=false;
    	std::string op;
    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:87:2: (fst= expr5 ( (tok= ':=' |tok= '=' | assign_op ) nxt= expr )? )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:87:4: fst= expr5 ( (tok= ':=' |tok= '=' | assign_op ) nxt= expr )?
        {
            FOLLOWPUSH(FOLLOW_expr5_in_expr6150);
            fst=expr5(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr6Ex;
            }


            {

                		resultNode = fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:91:2: ( (tok= ':=' |tok= '=' | assign_op ) nxt= expr )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case 25:
                    case 30:
                    case 33:
                    case 37:
                    case 40:
                    case 42:
                    case 47:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:92:3: (tok= ':=' |tok= '=' | assign_op ) nxt= expr
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:92:3: (tok= ':=' |tok= '=' | assign_op )
            	        {
            	            int alt5=3;
            	            switch ( LA(1) )
            	            {
            	            case 42:
            	            	{
            	            		alt5=1;
            	            	}
            	                break;
            	            case 47:
            	            	{
            	            		alt5=2;
            	            	}
            	                break;
            	            case 25:
            	            case 30:
            	            case 33:
            	            case 37:
            	            case 40:
            	            	{
            	            		alt5=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 5;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpr6Ex;

            	            }

            	            switch (alt5)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:92:4: tok= ':='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_expr6163);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr6Ex;
            	        	        }


            	        	        {
            	        	            isLocal = true;isOp=false;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:92:42: tok= '='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(47, &FOLLOW_47_in_expr6169);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr6Ex;
            	        	        }


            	        	        {
            	        	            isLocal=false;isOp=false;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:92:78: assign_op
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_assign_op_in_expr6173);
            	        	        assign_op1=assign_op(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr6Ex;
            	        	        }


            	        	        {
            	        	            isLocal=false;isOp=true;op=assign_op1.result
            	        	            ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_expr_in_expr6182);
            	        nxt=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }


            	        {

            	            			if(isOp){
            	            				resultNode=shared_ptr<const OpAssignNode>(new OpAssignNode(createLocationFromToken(assign_op1.token
            	            ), resultNode, op, nxt
            	            ));
            	            			}else{
            	            				resultNode=shared_ptr<const AssignNode>(new AssignNode(createLocationFromToken(tok), resultNode, 
            	            nxt
            	            , isLocal));
            	            			}
            	            		
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr6Ex; /* Prevent compiler warnings */
    ruleexpr6Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr6 */

/**
 * $ANTLR start assign_op
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:104:1: assign_op returns [std::string result, Token token] : (tok= '+=' |tok= '-=' |tok= '*=' |tok= '/=' |tok= '%=' );
 */
static niwangoParser_assign_op_return
assign_op(pniwangoParser ctx)
{
    niwangoParser_assign_op_return retval;


    pANTLR3_COMMON_TOKEN    tok;

    /* Initialize rule variables
     */

    tok       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:105:2: (tok= '+=' |tok= '-=' |tok= '*=' |tok= '/=' |tok= '%=' )

            ANTLR3_UINT32 alt7;

            alt7=5;

            switch ( LA(1) )
            {
            case 33:
            	{
            		alt7=1;
            	}
                break;
            case 37:
            	{
            		alt7=2;
            	}
                break;
            case 30:
            	{
            		alt7=3;
            	}
                break;
            case 40:
            	{
            		alt7=4;
            	}
                break;
            case 25:
            	{
            		alt7=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruleassign_opEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:105:4: tok= '+='
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_assign_op207);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	            retval.result="add";
        	            retval.token=tok;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:106:4: tok= '-='
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_assign_op216);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	            retval.result="subtract";
        	            retval.token=tok;

        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:107:4: tok= '*='
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(30, &FOLLOW_30_in_assign_op225);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	            retval.result="multiply";
        	            retval.token=tok;

        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:108:4: tok= '/='
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(40, &FOLLOW_40_in_assign_op234);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	            retval.result="divide";
        	            retval.token=tok;

        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:109:4: tok= '%='
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(25, &FOLLOW_25_in_assign_op243);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	            retval.result="modulo";
        	            retval.token=tok;

        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleassign_opEx; /* Prevent compiler warnings */
    ruleassign_opEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end assign_op */

/**
 * $ANTLR start expr5
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:113:1: expr5 returns [shared_ptr<const ExprNode> result] : fst= expr4 (tok= '||' nxt= expr4 )* ;
 */
static shared_ptr<const ExprNode>
expr5(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:120:2: (fst= expr4 (tok= '||' nxt= expr4 )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:120:4: fst= expr4 (tok= '||' nxt= expr4 )*
        {
            FOLLOWPUSH(FOLLOW_expr4_in_expr5272);
            fst=expr4(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr5Ex;
            }


            {

                		resultNode=fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:124:2: (tok= '||' nxt= expr4 )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case 56:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:125:3: tok= '||' nxt= expr4
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(56, &FOLLOW_56_in_expr5284);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }


            	        FOLLOWPUSH(FOLLOW_expr4_in_expr5288);
            	        nxt=expr4(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }


            	        {

            	            			resultNode=shared_ptr<const BinOpNode>(new BinOpNode(createLocationFromToken(tok), resultNode, "or", 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr5Ex; /* Prevent compiler warnings */
    ruleexpr5Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr5 */

/**
 * $ANTLR start expr4
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:131:1: expr4 returns [shared_ptr<const ExprNode> result] : fst= expr3 (tok= '&&' nxt= expr3 )* ;
 */
static shared_ptr<const ExprNode>
expr4(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:138:2: (fst= expr3 (tok= '&&' nxt= expr3 )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:138:4: fst= expr3 (tok= '&&' nxt= expr3 )*
        {
            FOLLOWPUSH(FOLLOW_expr3_in_expr4320);
            fst=expr3(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr4Ex;
            }


            {

                		resultNode=fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:142:2: (tok= '&&' nxt= expr3 )*

            for (;;)
            {
                int alt9=2;
                switch ( LA(1) )
                {
                case 26:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:143:3: tok= '&&' nxt= expr3
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(26, &FOLLOW_26_in_expr4332);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }


            	        FOLLOWPUSH(FOLLOW_expr3_in_expr4336);
            	        nxt=expr3(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }


            	        {

            	            			resultNode=shared_ptr<const BinOpNode>(new BinOpNode(createLocationFromToken(tok), resultNode, "and", 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr4Ex; /* Prevent compiler warnings */
    ruleexpr4Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr4 */

/**
 * $ANTLR start expr3
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:149:1: expr3 returns [shared_ptr<const ExprNode> result] : fst= expr2 ( (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' ) nxt= expr2 )* ;
 */
static shared_ptr<const ExprNode>
expr3(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	std::string op;
    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:157:2: (fst= expr2 ( (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' ) nxt= expr2 )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:157:4: fst= expr2 ( (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' ) nxt= expr2 )*
        {
            FOLLOWPUSH(FOLLOW_expr2_in_expr3368);
            fst=expr2(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr3Ex;
            }


            {

                		resultNode = fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:161:2: ( (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' ) nxt= expr2 )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case 23:
                case 44:
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:3: (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' ) nxt= expr2
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:3: (tok= '<' |tok= '>' |tok= '<>' |tok= '==' |tok= '!=' |tok= '<=' |tok= '>=' )
            	        {
            	            int alt10=7;
            	            switch ( LA(1) )
            	            {
            	            case 44:
            	            	{
            	            		alt10=1;
            	            	}
            	                break;
            	            case 49:
            	            	{
            	            		alt10=2;
            	            	}
            	                break;
            	            case 46:
            	            	{
            	            		alt10=3;
            	            	}
            	                break;
            	            case 48:
            	            	{
            	            		alt10=4;
            	            	}
            	                break;
            	            case 23:
            	            	{
            	            		alt10=5;
            	            	}
            	                break;
            	            case 45:
            	            	{
            	            		alt10=6;
            	            	}
            	                break;
            	            case 50:
            	            	{
            	            		alt10=7;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 10;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpr3Ex;

            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:4: tok= '<'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(44, &FOLLOW_44_in_expr3381);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="lessThan";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:31: tok= '>'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(49, &FOLLOW_49_in_expr3389);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="greaterThan";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:61: tok= '<>'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(46, &FOLLOW_46_in_expr3397);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="compare";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:88: tok= '=='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(48, &FOLLOW_48_in_expr3405);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="equals";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:114: tok= '!='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(23, &FOLLOW_23_in_expr3413);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="notEquals";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:143: tok= '<='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(45, &FOLLOW_45_in_expr3421);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="notGreaterThan";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 7:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:162:177: tok= '>='
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(50, &FOLLOW_50_in_expr3429);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr3Ex;
            	        	        }


            	        	        {
            	        	            op="notLessThan";
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3439);
            	        nxt=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }


            	        {

            	            			resultNode=shared_ptr<const BinOpNode>(new BinOpNode(createLocationFromToken(tok), resultNode, op, 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr3Ex; /* Prevent compiler warnings */
    ruleexpr3Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr3 */

/**
 * $ANTLR start expr2
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:169:1: expr2 returns [shared_ptr<const ExprNode> result] : fst= expr1 ( (tok= '+' |tok= '-' ) nxt= expr1 )* ;
 */
static shared_ptr<const ExprNode>
expr2(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	std::string op;
    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:177:2: (fst= expr1 ( (tok= '+' |tok= '-' ) nxt= expr1 )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:177:4: fst= expr1 ( (tok= '+' |tok= '-' ) nxt= expr1 )*
        {
            FOLLOWPUSH(FOLLOW_expr1_in_expr2471);
            fst=expr1(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr2Ex;
            }


            {

                		resultNode = fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:181:2: ( (tok= '+' |tok= '-' ) nxt= expr1 )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) )
                {
                case 31:
                case 35:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:182:3: (tok= '+' |tok= '-' ) nxt= expr1
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:182:3: (tok= '+' |tok= '-' )
            	        {
            	            int alt12=2;
            	            switch ( LA(1) )
            	            {
            	            case 31:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case 35:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 12;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpr2Ex;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:182:4: tok= '+'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(31, &FOLLOW_31_in_expr2484);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr2Ex;
            	        	        }


            	        	        {
            	        	            op="add";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:182:25: tok= '-'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_expr2491);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr2Ex;
            	        	        }


            	        	        {
            	        	            op="subtract";
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2500);
            	        nxt=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }


            	        {

            	            			resultNode=shared_ptr<const BinOpNode>(new BinOpNode(createLocationFromToken(tok), resultNode, op, 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr2Ex; /* Prevent compiler warnings */
    ruleexpr2Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr2 */

/**
 * $ANTLR start expr1
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:188:1: expr1 returns [shared_ptr<const ExprNode> result] : fst= term ( (tok= '*' |tok= '/' |tok= '%' ) nxt= term )* ;
 */
static shared_ptr<const ExprNode>
expr1(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	std::string op;
    	shared_ptr<const ExprNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:196:2: (fst= term ( (tok= '*' |tok= '/' |tok= '%' ) nxt= term )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:196:4: fst= term ( (tok= '*' |tok= '/' |tok= '%' ) nxt= term )*
        {
            FOLLOWPUSH(FOLLOW_term_in_expr1530);
            fst=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpr1Ex;
            }


            {

                		resultNode=fst
                ;
                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:200:2: ( (tok= '*' |tok= '/' |tok= '%' ) nxt= term )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case 24:
                case 29:
                case 39:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:201:3: (tok= '*' |tok= '/' |tok= '%' ) nxt= term
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:201:3: (tok= '*' |tok= '/' |tok= '%' )
            	        {
            	            int alt14=3;
            	            switch ( LA(1) )
            	            {
            	            case 29:
            	            	{
            	            		alt14=1;
            	            	}
            	                break;
            	            case 39:
            	            	{
            	            		alt14=2;
            	            	}
            	                break;
            	            case 24:
            	            	{
            	            		alt14=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 14;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpr1Ex;

            	            }

            	            switch (alt14)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:201:4: tok= '*'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(29, &FOLLOW_29_in_expr1544);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr1Ex;
            	        	        }


            	        	        {
            	        	            op="multiply";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:201:31: tok= '/'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_expr1552);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr1Ex;
            	        	        }


            	        	        {
            	        	            op="divide";
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:201:56: tok= '%'
            	        	    {
            	        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(24, &FOLLOW_24_in_expr1560);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpr1Ex;
            	        	        }


            	        	        {
            	        	            op="modulo";
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_term_in_expr1569);
            	        nxt=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }


            	        {

            	            			resultNode=shared_ptr<const BinOpNode>(new BinOpNode(createLocationFromToken(tok), resultNode, op, 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr1Ex; /* Prevent compiler warnings */
    ruleexpr1Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end expr1 */

/**
 * $ANTLR start term
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:209:1: term returns [shared_ptr<const ExprNode> result] : (tok= '++' t= term |tok= '--' t= term |tok= '+' t= term |tok= '-' t= term |tok= '!' t= term | postfix );
 */
static shared_ptr<const ExprNode>
term(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ExprNode> t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> postfix2;
    #undef	RETURN_TYPE_postfix2
    #define	RETURN_TYPE_postfix2 shared_ptr<const ExprNode>

    /* Initialize rule variables
     */

    tok       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:210:2: (tok= '++' t= term |tok= '--' t= term |tok= '+' t= term |tok= '-' t= term |tok= '!' t= term | postfix )

            ANTLR3_UINT32 alt16;

            alt16=6;

            switch ( LA(1) )
            {
            case 32:
            	{
            		alt16=1;
            	}
                break;
            case 36:
            	{
            		alt16=2;
            	}
                break;
            case 31:
            	{
            		alt16=3;
            	}
                break;
            case 35:
            	{
            		alt16=4;
            	}
                break;
            case 22:
            	{
            		alt16=5;
            	}
                break;
            case HEX_LITERAL:
            case IDENT:
            case NUM_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 27:
            case 51:
            case 54:
            case 55:
            	{
            		alt16=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:210:4: tok= '++' t= term
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(32, &FOLLOW_32_in_term594);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_term_in_term598);
        	        t=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		shared_ptr<const ExprNode> termNode = t
        	            ;
        	            		result=shared_ptr<const PreOpNode>(new PreOpNode(createLocationFromToken(tok), termNode, "increase"));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:215:4: tok= '--' t= term
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_term608);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_term_in_term612);
        	        t=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		shared_ptr<const ExprNode> termNode = t
        	            ;
        	            		result=shared_ptr<const PreOpNode>(new PreOpNode(createLocationFromToken(tok), termNode, "decrease"));

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:220:4: tok= '+' t= term
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(31, &FOLLOW_31_in_term622);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_term_in_term626);
        	        t=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		shared_ptr<const ExprNode> termNode = t
        	            ;
        	            		result=shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(tok), termNode, "plus"));

        	            	
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:225:4: tok= '-' t= term
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_term636);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_term_in_term640);
        	        t=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		shared_ptr<const ExprNode> termNode = t
        	            ;
        	            		result=shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(tok), termNode, "minus"));

        	            	
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:230:4: tok= '!' t= term
        	    {
        	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(22, &FOLLOW_22_in_term650);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_term_in_term654);
        	        t=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		shared_ptr<const ExprNode> termNode = t
        	            ;
        	            		result=shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(tok), termNode, "not"));

        	            	
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:235:4: postfix
        	    {
        	        FOLLOWPUSH(FOLLOW_postfix_in_term662);
        	        postfix2=postfix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }


        	        {

        	            		result= 
        	            postfix2
        	            ;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end term */

/**
 * $ANTLR start postfix
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:240:1: postfix returns [shared_ptr<const ExprNode> result] : primary (tok= '++' |tok= '--' |tok= '.' name |tok= '[' array_idx= object_def[$tok] ']' |tok= '(' binded= object_def[$tok] ')' )* ;
 */
static shared_ptr<const ExprNode>
postfix(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ObjectNode> array_idx;
    #undef	RETURN_TYPE_array_idx
    #define	RETURN_TYPE_array_idx shared_ptr<const ObjectNode>

    shared_ptr<const ObjectNode> binded;
    #undef	RETURN_TYPE_binded
    #define	RETURN_TYPE_binded shared_ptr<const ObjectNode>

    shared_ptr<const ExprNode> primary3;
    #undef	RETURN_TYPE_primary3
    #define	RETURN_TYPE_primary3 shared_ptr<const ExprNode>

    niwangoParser_name_return name4;
    #undef	RETURN_TYPE_name4
    #define	RETURN_TYPE_name4 niwangoParser_name_return

    /* Initialize rule variables
     */

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:241:2: ( primary (tok= '++' |tok= '--' |tok= '.' name |tok= '[' array_idx= object_def[$tok] ']' |tok= '(' binded= object_def[$tok] ')' )* )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:241:4: primary (tok= '++' |tok= '--' |tok= '.' name |tok= '[' array_idx= object_def[$tok] ']' |tok= '(' binded= object_def[$tok] ')' )*
        {
            FOLLOWPUSH(FOLLOW_primary_in_postfix679);
            primary3=primary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepostfixEx;
            }


            {

                		result=
                primary3
                ;

                	
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:245:2: (tok= '++' |tok= '--' |tok= '.' name |tok= '[' array_idx= object_def[$tok] ']' |tok= '(' binded= object_def[$tok] ')' )*

            for (;;)
            {
                int alt17=6;
                switch ( LA(1) )
                {
                case 32:
                	{
                		alt17=1;
                	}
                    break;
                case 36:
                	{
                		alt17=2;
                	}
                    break;
                case 38:
                	{
                		alt17=3;
                	}
                    break;
                case 51:
                	{
                		alt17=4;
                	}
                    break;
                case 27:
                	{
                		alt17=5;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:245:4: tok= '++'
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(32, &FOLLOW_32_in_postfix689);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        {

            	            		result=shared_ptr<const PostOpNode>(new PostOpNode(createLocationFromToken(tok), 
            	            result
            	            , "increase"));

            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:249:4: tok= '--'
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_postfix699);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        {

            	            		result=shared_ptr<const PostOpNode>(new PostOpNode(createLocationFromToken(tok), 
            	            result
            	            , "decrease"));

            	            	
            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:253:4: tok= '.' name
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_postfix709);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_name_in_postfix711);
            	        name4=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        {

            	            		result=shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(tok), 
            	            result
            	            , name4.result
            	            ));

            	            	
            	        }


            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:257:4: tok= '[' array_idx= object_def[$tok] ']'
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(51, &FOLLOW_51_in_postfix721);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_object_def_in_postfix725);
            	        array_idx=object_def(ctx, tok);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	         MATCHT(53, &FOLLOW_53_in_postfix728);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        {

            	            		shared_ptr<const ObjectNode> objNode = array_idx
            	            ;
            	            		result=shared_ptr<const IndexAcessNode>(new IndexAcessNode(createLocationFromToken(tok), 
            	            result
            	            , objNode));

            	            	
            	        }


            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:262:4: tok= '(' binded= object_def[$tok] ')'
            	    {
            	        tok = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_postfix738);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_object_def_in_postfix742);
            	        binded=object_def(ctx, tok);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	         MATCHT(28, &FOLLOW_28_in_postfix745);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }


            	        {

            	            		shared_ptr<const ObjectNode> objNode = binded
            	            ;
            	            		result=shared_ptr<const BindNode>(new BindNode(createLocationFromToken(tok), 
            	            result
            	            , objNode));

            	            	
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepostfixEx; /* Prevent compiler warnings */
    rulepostfixEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end postfix */

/**
 * $ANTLR start primary
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:269:1: primary returns [shared_ptr<const ExprNode> result] : ( literal | array | name | '(' fst= expr (t= ';' nxt= expr )* ')' );
 */
static shared_ptr<const ExprNode>
primary(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    t;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    shared_ptr<const LiteralNode> literal5;
    #undef	RETURN_TYPE_literal5
    #define	RETURN_TYPE_literal5 shared_ptr<const LiteralNode>

    shared_ptr<const ObjectNode> array6;
    #undef	RETURN_TYPE_array6
    #define	RETURN_TYPE_array6 shared_ptr<const ObjectNode>

    niwangoParser_name_return name7;
    #undef	RETURN_TYPE_name7
    #define	RETURN_TYPE_name7 niwangoParser_name_return

    /* Initialize rule variables
     */

    t       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:270:2: ( literal | array | name | '(' fst= expr (t= ';' nxt= expr )* ')' )

            ANTLR3_UINT32 alt19;

            alt19=4;

            switch ( LA(1) )
            {
            case HEX_LITERAL:
            case NUM_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 54:
            case 55:
            	{
            		alt19=1;
            	}
                break;
            case 51:
            	{
            		alt19=2;
            	}
                break;
            case IDENT:
            	{
            		alt19=3;
            	}
                break;
            case 27:
            	{
            		alt19=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:270:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primary766);
        	        literal5=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	        {

        	            		result= 
        	            literal5
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:274:4: array
        	    {
        	        FOLLOWPUSH(FOLLOW_array_in_primary774);
        	        array6=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	        {

        	            		result= 
        	            array6
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:278:4: name
        	    {
        	        FOLLOWPUSH(FOLLOW_name_in_primary782);
        	        name7=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	        {

        	            		result= shared_ptr<const InvokeNode>(new InvokeNode(createLocationFromToken(
        	            name7.token
        	            ), shared_ptr<const ExprNode>(), name7.result
        	            ));

        	            	
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:282:4: '(' fst= expr (t= ';' nxt= expr )* ')'
        	    {
        	         MATCHT(27, &FOLLOW_27_in_primary790);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expr_in_primary796);
        	        fst=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	        {

        	            			result= 
        	            fst
        	            ;

        	            		
        	        }


        	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:287:3: (t= ';' nxt= expr )*

        	        for (;;)
        	        {
        	            int alt18=2;
        	            switch ( LA(1) )
        	            {
        	            case 43:
        	            	{
        	            		alt18=1;
        	            	}
        	                break;

        	            }

        	            switch (alt18)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:287:4: t= ';' nxt= expr
        	        	    {
        	        	        t = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_primary807);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expr_in_primary811);
        	        	        nxt=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryEx;
        	        	        }


        	        	        {

        	        	            				result= shared_ptr<const ContNode>(new ContNode(createLocationFromToken(t), 
        	        	            result
        	        	            , nxt
        	        	            ));

        	        	            			
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop18;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop18: ; /* Jump out to here if this rule does not match */


        	         MATCHT(28, &FOLLOW_28_in_primary824);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end primary */

/**
 * $ANTLR start object_def
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:295:1: object_def[Token tok] returns [shared_ptr<const ObjectNode> result] : ( (fst= object_element ) ( ',' nxt= object_element )* )? ;
 */
static shared_ptr<const ObjectNode>
object_def(pniwangoParser ctx, Token tok)
{
    shared_ptr<const ObjectNode> result;


    niwangoParser_object_element_return fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst niwangoParser_object_element_return

    niwangoParser_object_element_return nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt niwangoParser_object_element_return

    /* Initialize rule variables
     */


    	shared_ptr<ObjectNode> obj(shared_ptr<ObjectNode>(new ObjectNode(createLocationFromToken(tok))));

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:2: ( ( (fst= object_element ) ( ',' nxt= object_element )* )? )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:3: ( (fst= object_element ) ( ',' nxt= object_element )* )?
        {
            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:3: ( (fst= object_element ) ( ',' nxt= object_element )* )?
            {
                int alt21=2;
                switch ( LA(1) )
                {
                    case HEX_LITERAL:
                    case IDENT:
                    case NUM_LITERAL:
                    case OCT_LITERAL:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case 22:
                    case 27:
                    case 31:
                    case 32:
                    case 35:
                    case 36:
                    case 51:
                    case 52:
                    case 54:
                    case 55:
                    	{
                    		alt21=1;
                    	}
                        break;
                }

                switch (alt21)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:4: (fst= object_element ) ( ',' nxt= object_element )*
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:4: (fst= object_element )
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:302:5: fst= object_element
            	        {
            	            FOLLOWPUSH(FOLLOW_object_element_in_object_def852);
            	            fst=object_element(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_defEx;
            	            }


            	        }


            	        {

            	            		obj->append(fst.name
            	            , fst.exprNode
            	            );
            	            	
            	        }


            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:306:2: ( ',' nxt= object_element )*

            	        for (;;)
            	        {
            	            int alt20=2;
            	            switch ( LA(1) )
            	            {
            	            case 34:
            	            	{
            	            		alt20=1;
            	            	}
            	                break;

            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:306:3: ',' nxt= object_element
            	        	    {
            	        	         MATCHT(34, &FOLLOW_34_in_object_def860);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobject_defEx;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_object_element_in_object_def864);
            	        	        nxt=object_element(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobject_defEx;
            	        	        }


            	        	        {

            	        	            		obj->append(nxt.name
            	        	            , nxt.exprNode
            	        	            );
            	        	            	
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop20;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop20: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_defEx; /* Prevent compiler warnings */
    ruleobject_defEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=obj;


                }
            }


    return result;
}
/* $ANTLR end object_def */

/**
 * $ANTLR start object_element
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:311:1: object_element returns [bool hasName, std::string name, shared_ptr<const ExprNode> exprNode] : ( name ':' )? object_expr_list ;
 */
static niwangoParser_object_element_return
object_element(pniwangoParser ctx)
{
    niwangoParser_object_element_return retval;


    niwangoParser_name_return name8;
    #undef	RETURN_TYPE_name8
    #define	RETURN_TYPE_name8 niwangoParser_name_return

    shared_ptr<const ExprNode> object_expr_list9;
    #undef	RETURN_TYPE_object_expr_list9
    #define	RETURN_TYPE_object_expr_list9 shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	retval.hasName=false;


    retval.start = LT(1); retval.stop = retval.start;


    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:315:2: ( ( name ':' )? object_expr_list )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:315:4: ( name ':' )? object_expr_list
        {
            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:315:4: ( name ':' )?
            {
                int alt22=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case 41:
                    		    	{
                    		    		alt22=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt22)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:315:5: name ':'
            	    {
            	        FOLLOWPUSH(FOLLOW_name_in_object_element889);
            	        name8=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobject_elementEx;
            	        }


            	        {
            	            retval.hasName= true;
            	             retval.name= 
            	            name8.result
            	            ;

            	        }


            	         MATCHT(41, &FOLLOW_41_in_object_element893);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobject_elementEx;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_object_expr_list_in_object_element898);
            object_expr_list9=object_expr_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_elementEx;
            }


            {

                		retval.exprNode= 
                object_expr_list9
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_elementEx; /* Prevent compiler warnings */
    ruleobject_elementEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end object_element */

/**
 * $ANTLR start object_expr_list
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:322:1: object_expr_list returns [shared_ptr<const ExprNode> result] : fst= expr ( (t= ';' nxt= expr ) )* ( ';' )? ;
 */
static shared_ptr<const ExprNode>
object_expr_list(pniwangoParser ctx)
{
    shared_ptr<const ExprNode> result;


    pANTLR3_COMMON_TOKEN    t;
    shared_ptr<const ExprNode> fst;
    #undef	RETURN_TYPE_fst
    #define	RETURN_TYPE_fst shared_ptr<const ExprNode>

    shared_ptr<const ExprNode> nxt;
    #undef	RETURN_TYPE_nxt
    #define	RETURN_TYPE_nxt shared_ptr<const ExprNode>

    /* Initialize rule variables
     */


    	shared_ptr<const ExprNode> resultNode;

    t       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:329:2: (fst= expr ( (t= ';' nxt= expr ) )* ( ';' )? )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:329:4: fst= expr ( (t= ';' nxt= expr ) )* ( ';' )?
        {
            FOLLOWPUSH(FOLLOW_expr_in_object_expr_list927);
            fst=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_expr_listEx;
            }


            {
                resultNode = fst
                ;
            }


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:330:2: ( (t= ';' nxt= expr ) )*

            for (;;)
            {
                int alt23=2;
                switch ( LA(1) )
                {
                case 43:
                	{
                		switch ( LA(2) )
                		{
                		case HEX_LITERAL:
                		case IDENT:
                		case NUM_LITERAL:
                		case OCT_LITERAL:
                		case STRING_DOUBLE:
                		case STRING_SINGLE:
                		case 22:
                		case 27:
                		case 31:
                		case 32:
                		case 35:
                		case 36:
                		case 51:
                		case 52:
                		case 54:
                		case 55:
                			{
                				alt23=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:330:3: (t= ';' nxt= expr )
            	    {
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:330:3: (t= ';' nxt= expr )
            	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:330:4: t= ';' nxt= expr
            	        {
            	            t = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_object_expr_list936);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_expr_listEx;
            	            }


            	            FOLLOWPUSH(FOLLOW_expr_in_object_expr_list940);
            	            nxt=expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_expr_listEx;
            	            }


            	        }


            	        {

            	            			resultNode = shared_ptr<const ContNode>(new ContNode(createLocationFromToken(t), resultNode, 
            	            nxt
            	            ));
            	            		
            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:334:5: ( ';' )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case 43:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:334:6: ';'
            	    {
            	         MATCHT(43, &FOLLOW_43_in_object_expr_list952);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobject_expr_listEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_expr_listEx; /* Prevent compiler warnings */
    ruleobject_expr_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end object_expr_list */

/**
 * $ANTLR start name
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:337:1: name returns [std::string result, Token token] : t= IDENT ;
 */
static niwangoParser_name_return
name(pniwangoParser ctx)
{
    niwangoParser_name_return retval;


    pANTLR3_COMMON_TOKEN    t;

    /* Initialize rule variables
     */

    t       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:338:2: (t= IDENT )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:338:4: t= IDENT
        {
            t = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_name971);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }


            {

                		retval.result= createStringFromToken(t);

                		retval.token=t;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start array
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:345:1: array returns [shared_ptr<const ObjectNode> result] : tok= '[' object_def[$tok] ']' ;
 */
static shared_ptr<const ObjectNode>
array(pniwangoParser ctx)
{
    shared_ptr<const ObjectNode> result;


    pANTLR3_COMMON_TOKEN    tok;
    shared_ptr<const ObjectNode> object_def10;
    #undef	RETURN_TYPE_object_def10
    #define	RETURN_TYPE_object_def10 shared_ptr<const ObjectNode>

    /* Initialize rule variables
     */


    	shared_ptr<const ObjectNode> resultNode;

    tok       = NULL;

    {
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:355:2: (tok= '[' object_def[$tok] ']' )
        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:355:4: tok= '[' object_def[$tok] ']'
        {
            tok = (pANTLR3_COMMON_TOKEN) MATCHT(51, &FOLLOW_51_in_array999);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }


            FOLLOWPUSH(FOLLOW_object_def_in_array1002);
            object_def10=object_def(ctx, tok);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }


            {

                		resultNode=object_def10
                ;
                	
            }


             MATCHT(53, &FOLLOW_53_in_array1009);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	if(resultNode.get() == 0){
                    		resultNode = shared_ptr<ObjectNode>(new ObjectNode(createLocationFromToken(tok)));
                    	}
                    	
                    result=resultNode;


                }
            }


    return result;
}
/* $ANTLR end array */

/**
 * $ANTLR start literal
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:362:1: literal returns [shared_ptr<const LiteralNode> result] : (n= numeric |b= boolean |s= string );
 */
static shared_ptr<const LiteralNode>
literal(pniwangoParser ctx)
{
    shared_ptr<const LiteralNode> result;


    shared_ptr<const NumericLiteralNode> n;
    #undef	RETURN_TYPE_n
    #define	RETURN_TYPE_n shared_ptr<const NumericLiteralNode>

    shared_ptr<const BoolLiteralNode> b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b shared_ptr<const BoolLiteralNode>

    shared_ptr<const StringLiteralNode> s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s shared_ptr<const StringLiteralNode>

    /* Initialize rule variables
     */

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:362:55: (n= numeric |b= boolean |s= string )

            ANTLR3_UINT32 alt25;

            alt25=3;

            switch ( LA(1) )
            {
            case HEX_LITERAL:
            case NUM_LITERAL:
            case OCT_LITERAL:
            	{
            		alt25=1;
            	}
                break;
            case 54:
            case 55:
            	{
            		alt25=2;
            	}
                break;
            case STRING_DOUBLE:
            case STRING_SINGLE:
            	{
            		alt25=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:363:2: n= numeric
        	    {
        	        FOLLOWPUSH(FOLLOW_numeric_in_literal1023);
        	        n=numeric(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		result= 
        	            n
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:367:4: b= boolean
        	    {
        	        FOLLOWPUSH(FOLLOW_boolean_in_literal1033);
        	        b=boolean(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		result= 
        	            b
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:371:4: s= string
        	    {
        	        FOLLOWPUSH(FOLLOW_string_in_literal1043);
        	        s=string(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		result= 
        	            s
        	            ;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end literal */

/**
 * $ANTLR start boolean
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:376:1: boolean returns [shared_ptr<const BoolLiteralNode> result] : (lt= 'true' |lt= 'false' );
 */
static shared_ptr<const BoolLiteralNode>
boolean(pniwangoParser ctx)
{
    shared_ptr<const BoolLiteralNode> result;


    pANTLR3_COMMON_TOKEN    lt;

    /* Initialize rule variables
     */

    lt       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:377:2: (lt= 'true' |lt= 'false' )

            ANTLR3_UINT32 alt26;

            alt26=2;

            switch ( LA(1) )
            {
            case 55:
            	{
            		alt26=1;
            	}
                break;
            case 54:
            	{
            		alt26=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 26;
                EXCEPTION->state        = 0;


                goto rulebooleanEx;

            }

            switch (alt26)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:377:4: lt= 'true'
        	    {
        	        lt = (pANTLR3_COMMON_TOKEN) MATCHT(55, &FOLLOW_55_in_boolean1061);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebooleanEx;
        	        }


        	        {

        	            		result= shared_ptr<const BoolLiteralNode>(new BoolLiteralNode(createLocationFromToken(lt), true));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:381:4: lt= 'false'
        	    {
        	        lt = (pANTLR3_COMMON_TOKEN) MATCHT(54, &FOLLOW_54_in_boolean1071);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebooleanEx;
        	        }


        	        {

        	            		result= shared_ptr<const BoolLiteralNode>(new BoolLiteralNode(createLocationFromToken(lt), false));

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulebooleanEx; /* Prevent compiler warnings */
    rulebooleanEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end boolean */

/**
 * $ANTLR start numeric
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:386:1: numeric returns [shared_ptr<const NumericLiteralNode> result] : ( (str= HEX_LITERAL |str= OCT_LITERAL ) |str= NUM_LITERAL );
 */
static shared_ptr<const NumericLiteralNode>
numeric(pniwangoParser ctx)
{
    shared_ptr<const NumericLiteralNode> result;


    pANTLR3_COMMON_TOKEN    str;

    /* Initialize rule variables
     */

    str       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:387:2: ( (str= HEX_LITERAL |str= OCT_LITERAL ) |str= NUM_LITERAL )

            ANTLR3_UINT32 alt28;

            alt28=2;

            switch ( LA(1) )
            {
            case HEX_LITERAL:
            case OCT_LITERAL:
            	{
            		alt28=1;
            	}
                break;
            case NUM_LITERAL:
            	{
            		alt28=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto rulenumericEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:387:4: (str= HEX_LITERAL |str= OCT_LITERAL )
        	    {
        	        // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:387:4: (str= HEX_LITERAL |str= OCT_LITERAL )
        	        {
        	            int alt27=2;
        	            switch ( LA(1) )
        	            {
        	            case HEX_LITERAL:
        	            	{
        	            		alt27=1;
        	            	}
        	                break;
        	            case OCT_LITERAL:
        	            	{
        	            		alt27=2;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 27;
        	                EXCEPTION->state        = 0;


        	                goto rulenumericEx;

        	            }

        	            switch (alt27)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:387:6: str= HEX_LITERAL
        	        	    {
        	        	        str = (pANTLR3_COMMON_TOKEN) MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_numeric1092);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenumericEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:387:24: str= OCT_LITERAL
        	        	    {
        	        	        str = (pANTLR3_COMMON_TOKEN) MATCHT(OCT_LITERAL, &FOLLOW_OCT_LITERAL_in_numeric1098);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenumericEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        {

        	            		int num = strtol(createStringFromToken(str).c_str(), 0, 0);
        	            		
        	            result= shared_ptr<const NumericLiteralNode>(new NumericLiteralNode(createLocationFromToken(str), num));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:392:4: str= NUM_LITERAL
        	    {
        	        str = (pANTLR3_COMMON_TOKEN) MATCHT(NUM_LITERAL, &FOLLOW_NUM_LITERAL_in_numeric1109);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericEx;
        	        }


        	        {

        	            		double num = atof(createStringFromToken(str).c_str());
        	            		
        	            result= shared_ptr<const NumericLiteralNode>(new NumericLiteralNode(createLocationFromToken(str), num));

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulenumericEx; /* Prevent compiler warnings */
    rulenumericEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end numeric */

/**
 * $ANTLR start string
 * /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:398:1: string returns [shared_ptr<const StringLiteralNode> result] : (t= STRING_SINGLE |t= STRING_DOUBLE );
 */
static shared_ptr<const StringLiteralNode>
string(pniwangoParser ctx)
{
    shared_ptr<const StringLiteralNode> result;


    pANTLR3_COMMON_TOKEN    t;

    /* Initialize rule variables
     */

    t       = NULL;

    {
        {
            //  /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:399:2: (t= STRING_SINGLE |t= STRING_DOUBLE )

            ANTLR3_UINT32 alt29;

            alt29=2;

            switch ( LA(1) )
            {
            case STRING_SINGLE:
            	{
            		alt29=1;
            	}
                break;
            case STRING_DOUBLE:
            	{
            		alt29=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto rulestringEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:399:4: t= STRING_SINGLE
        	    {
        	        t = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_SINGLE, &FOLLOW_STRING_SINGLE_in_string1128);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {

        	            		std::string str = createStringFromToken(t);
        	            		
        	            result= shared_ptr<const StringLiteralNode>(new StringLiteralNode(createLocationFromToken(t), str.substr(1, str.length()-2)));

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/saccubus/Saccubus/src/nekomata/parser/niwango.g:404:4: t= STRING_DOUBLE
        	    {
        	        t = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_DOUBLE, &FOLLOW_STRING_DOUBLE_in_string1138);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestringEx;
        	        }


        	        {

        	            		std::string str = createStringFromToken(t);
        	            		//FIXME: ちょっと醜い。どうにかならないかな。
        	            		
        	            result= shared_ptr<const StringLiteralNode>(new StringLiteralNode(createLocationFromToken(t), unescapeString(str.substr(1, str.length()-2))));

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestringEx; /* Prevent compiler warnings */
    rulestringEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return result;
}
/* $ANTLR end string */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
